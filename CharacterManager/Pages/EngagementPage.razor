@page "/engagement"
@layout EngagementLayout


@using Blazored.LocalStorage
@using System.Text.Json
@using System.Security.Cryptography
@inject Db db;
@inject DataService dataService;
@inject ILocalStorageService localStore;
@inject ISnackbar snackbar;

<PageTitle>Engagements</PageTitle>

<MudText Typo="Typo.h4">Engagements</MudText>

<MudGrid>
	<MudItem md="2">
		<MudPaper>
			<MudList Clickable="true" Dense="true">
				<MudListSubheader>
					<MudText Typo="Typo.subtitle1">Available characters</MudText>
				</MudListSubheader>
				@foreach (var character in AvailableCharacters)
				{
					<MudListItem Text="@($"{character.Name} - Lv {character.Level}")" OnClick="() => Add(character)" />
				}
			</MudList>
		</MudPaper>
	</MudItem>

	<MudItem xs="10">

		<MudExpansionPanel Text="Filters">

			<MudGrid>
				<MudItem xs="4">
					<MudSelect T="StatusType"
							   MultiSelection="true"
							   Label="Stats"
							   @bind-SelectedValues="showStats"
							   MultiSelectionTextFunc="e => e.Count.ToString()">
						@foreach (var stat in Enum.GetValues<StatusType>())
						{
							<MudSelectItem Value="stat">@stat.ToString()</MudSelectItem>
						}
					</MudSelect>
				</MudItem>

				<MudItem xs="4">
					<MudSelectExtended T="JsonSkill"
									   SearchBox="true"
									   SearchFunc="(skill,searchString) => skill.Name!.ToLower().Contains(searchString.ToLower())"
									   ToStringFunc="e => e.Name"
									   ItemCollection="availableSkills"
									   MultiSelection="true"
									   MultiSelectionTextFunc="e => e.Count.ToString()"
									   @bind-SelectedValues="showSkills"
									   Label="Skills">
					</MudSelectExtended>
				</MudItem>
				<MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="SaveFilter" />
			</MudGrid>
		</MudExpansionPanel>

		<MudPaper Class="pa-2">
			<MudStack>
				<MudToolBar>
					<MudText Typo="Typo.subtitle1">Engaged characters</MudText>
					<MudIconButton Icon="@ExtraIcon.Dice" Size="Size.Small" OnClick="ProcessInitiative" />
				</MudToolBar>
				@if (Selected.Any())
				{
					@foreach (var selectedItem in Selected.OrderByDescending(d => d.Initiative))
					{
						<MudGrid Class="pa-2 mb-2">
							<MudItem xs="12">
								<MudStack Row="true" AlignItems="AlignItems.Center">

									<MudToggleIconButton @bind-Toggled="selectedItem.Collapsed"
														 Icon="@Icons.Material.Filled.Visibility"
														 ToggledIcon="@Icons.Material.Filled.VisibilityOff"
														 ToggledSize="Size.Small"
														 Size="Size.Small" />
									<MudTextField Label="@($"Character - {selectedItem.Character.Name}")"
												  @bind-Value="selectedItem.Character.Name" />
									<MudNumericField Label="Current initiative"
													 @bind-Value="selectedItem.Initiative" />
									<MudSpacer />
									<MudIconButton Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="() => Selected.Remove(selectedItem)" />
								</MudStack>
							</MudItem>

							<MudItem xs="12">
								<MudCollapse Expanded="selectedItem.Collapsed">
									<MudGrid Spacing="1">
										@foreach (var st in showStats)
										{
											<MudItem>

												<MudNumericField Label="@st.ToString()"
																 Style="max-width:60px"
																 @bind-Value="selectedItem.Character[st].Value"
																 ReadOnly="selectedItem.Character[st].IsReadOnly()" />
											</MudItem>
										}
										@foreach (var skill in showSkills)
										{
											<MudItem>
												<SkillSubComponent Skill="selectedItem.Character.GetSkill<PlayerSkill>(skill.Name!, skill.Attribute)" />
											</MudItem>
										}
										<MudItem xs="12"></MudItem>

										@foreach (var skill in selectedItem.Character.Skills.OfType<WeaponSkill>().Where(d => selectedItem.Character.Items.OfType<Weapon>().Where(d => d.Equipped).Select(d => d.Skill).Contains(d.Name)))
										{
											<MudItem>
												<MudStack Row="true" Spacing="0">
													<MudNumericField Style="max-width:140px"
																	 Label="@skill.Name"
																	 Value="skill.Total"
																	 ReadOnly="true" />
													<MudNumericField Style="max-width:60px"
																	 Label="Defense"
																	 Value="skill.DefenseTotal"
																	 ReadOnly="true" />
												</MudStack>
											</MudItem>
										}
										<MudDivider />
										@foreach (var item in selectedItem.Character.Items.OfType<Equipment>().OrderByDescending(d => d.Equipped))
										{
											@if (item is Weapon weapon)
											{

												<MudTooltip>
													<TooltipContent>
														<MudStack Spacing="0">
															@if (!String.IsNullOrWhiteSpace(weapon.Damage))
															{
																<MudText>1H: @weapon.Damage + @selectedItem.Character[StatusType.DmgBonus].Value</MudText>
															}
															@if (!String.IsNullOrWhiteSpace(weapon.TwoHandedDamage))
															{
																<MudText>2H: @weapon.TwoHandedDamage + @selectedItem.Character[StatusType.DmgBonus].Value}</MudText>
															}
														</MudStack>
													</TooltipContent>
													<ChildContent>

														<MudCheckBox Label="@item.Name"
																	 @bind-Value="item.Equipped"
																	 Size="Size.Small" />
													</ChildContent>
												</MudTooltip>
											}
											else
											{
												<MudCheckBox Label="@item.Name"
															 @bind-Value="item.Equipped"
															 Size="Size.Small" />
											}
										}
									</MudGrid>
								</MudCollapse>
							</MudItem>
						</MudGrid>

					}
				}
				else
				{
					<MudText Style="height:200px" Align="Align.Center">
						There are no Engaged characters drag some here
					</MudText>
				}
			</MudStack>
		</MudPaper>
	</MudItem>
</MudGrid>

@code {

	List<Player> AvailableCharacters { get; set; } = new();

	List<Collapsible> Selected = new();

	string? skillFilter;

	List<JsonSkill> availableSkills = [];
	IEnumerable<StatusType> showStats = Enumerable.Empty<StatusType>();
	IEnumerable<JsonSkill> showSkills = Enumerable.Empty<JsonSkill>();

	protected override async Task OnInitializedAsync()
	{
		AvailableCharacters = await db.GetAll<Player>();
		var skills = await dataService.GetAllSkills();
		availableSkills.AddRange(skills.Select(d => new JsonSkill(d.Name, d.Attribute)).ToArray());
		showStats = await localStore.GetItemAsync<IEnumerable<StatusType>>(nameof(showStats));
		showSkills = await localStore.GetItemAsync<IEnumerable<JsonSkill>>(nameof(showSkills));
	}

	void Add(Player character)
	{
		var collapsible = new Collapsible(character.Duplicate());
		Selected.Add(collapsible);
	}

	async Task SaveFilter()
	{
		await localStore.SetItemAsync(nameof(showStats), showStats);
		await localStore.SetItemAsync(nameof(showSkills), showSkills);
		snackbar.Add("Filter saved", Severity.Success);
	}

	void ProcessInitiative()
	{
		foreach (var item in Selected)
		{
			item.Initiative = item.Character[StatusType.Initiative].Value + RandomNumberGenerator.GetInt32(1, 7);
		}
	}

	class Collapsible(Player character)
	{
		public Player Character { get; set; } = character;
		public bool Collapsed { get; set; } = true;
		public int Initiative { get; set; }
	}
	struct JsonSkill
	{
		public JsonSkill()
		{
		}

		public JsonSkill(string name, AttributeType? attribute)
		{
			Name=name;
			Attribute=attribute;
		}

		public string? Name { get; set; }

		public AttributeType? Attribute { get; set; }
	}
}