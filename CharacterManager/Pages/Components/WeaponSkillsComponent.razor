@using CsvHelper
@using Daemon.Data
@using System.Text
@inject IDialogService diagService
@inject DataService dataService

@if (Player is null)
{
	for (int i = 0; i < 3; i++)
	{
		<MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="60px" Animation="Animation.Pulse" />
	}
}
else
{
	<MudPaper Class="pa-2">
		<MudGrid Justify="Justify.Center" Spacing="0">
			<MudItem xs="12">
				<MudStack Row="true" AlignItems="AlignItems.Center">

					<MudText Typo="Typo.h6">Weapon Skills</MudText>

					<MudSpacer />

					<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Add" OnClick="Add" />
				</MudStack>
			</MudItem>

			<MudItem xs="6">
				<MudText><b>Skill Name</b></MudText>
			</MudItem>

			<MudItem xs="2">
				<MudText><b>Atk</b></MudText>
			</MudItem>

			<MudItem xs="2">
				<MudText><b>Def</b></MudText>
			</MudItem>

			<MudItem xs="2">
			</MudItem>

			@foreach (var skill in Player.Skills.OfType<WeaponSkill>().OrderBy(d => d.Name))
			{
				<MudItem xs="6" Class="d-flex align-center">
					<MudText>@skill.Name</MudText>
					</MudItem>

				<MudItem xs="2">
					<MudStack Spacing="0">
						<MudInput InputType="InputType.Number" @bind-Value="skill.Value" Margin="Margin.Dense" />
						<MudText>@skill.Total</MudText>
						</MudStack>
					</MudItem>

				<MudItem xs="2">
					<MudStack Spacing="0">
						<MudInput InputType="InputType.Number" @bind-Value="skill.DefenseValue" Margin="Margin.Dense" />
						<MudText>@skill.DefenseTotal</MudText>
						</MudStack>
					</MudItem>

				<MudItem xs="2">
					<MudStack Spacing="0" AlignItems="AlignItems.Center">
						<MudIconButton Edge="Edge.End" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="async () => await Delete(skill)" />
						@if (skill.BasedAttribute is not null)
						{
							<MudChip Style="font-size:10px" Size="Size.Small" Color="Color.Primary">@skill.BasedAttribute.Value.ToString()[..3].ToUpper()</MudChip>
						}
					</MudStack>
				</MudItem>


			}
		</MudGrid>
	</MudPaper>
}

@code {
	[Parameter]
	public Player Player { get; set; }

	async Task Delete(WeaponSkill skill)
	{
		var ensure = await diagService.ShowMessageBox($"Delete skill '{skill.Name}'", "Are you sure? this action can't be undone", "Delete", "Cancel");
		if (ensure == true)
			Player.Skills.Remove(skill);
	}

	async Task Add()
	{

		var weapons = await dataService.GetWeaponSkills();
		var diag = diagService.Show<AddSkillDialog>("", new DialogParameters
		{
			{ nameof(AddSkillDialog.CurrentSkillSet), Player.Skills.Select(d=>d.Name) },
			{ nameof(AddSkillDialog.DataSource), weapons }
		});

		var result = await diag.Result;

		if (!result.Canceled && result.Data is Skill skill)
		{
			Player.Skills.Add(new WeaponSkill
				{
					BasedAttribute = skill.Attribute,
					Description = skill.Description,
					Name = skill.Name,
				});
		}
	}
}
