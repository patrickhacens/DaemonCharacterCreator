@using Daemon.Data
<MudDialog>
	<TitleContent>
		<MudStack Row="true" AlignItems="AlignItems.Center">
			<MudText Typo="Typo.h6">Add Advantage / Disadvantage</MudText>
			<MudSpacer />
			<MudSwitch Label="custom" @bind-Value="custom" />
		</MudStack>
	</TitleContent>

	<DialogContent>
		@if (custom)
		{
			<MudForm @ref="form" Model="customAdvantage">
				<MudTextField @bind-Value="customAdvantage.Name" Label="Name" Required="true" Immediate="true"/>
				<MudTextField @bind-Value="customAdvantage.Description" Label="Description" Immediate="true" />
				<MudNumericField @bind-Value="customAdvantage.Cost" Label="Cost" Step="1" Immediate="true"/>
			</MudForm>
		}
		else
		{

			<MudTextField Label="Filter" @bind-Value="filter" OnDebounceIntervalElapsed="FilterAdvantages" DebounceInterval="200" />

			<MudSelect T="bool?" Label="Positive or negative" ValueChanged="(e) => { filterPositiveNegative = e; FilterAdvantages();}">
				<MudSelectItem T="bool?" Value="null">Todos</MudSelectItem>
				<MudSelectItem T="bool?" Value="true">Apenas positivos</MudSelectItem>
				<MudSelectItem T="bool?" Value="false">Apenas negativos</MudSelectItem>
			</MudSelect>

			<div style="max-height:60vh;overflow:scroll">

				<MudListExtended Clickable="true"
								 MultiSelection="true"
								 @bind-SelectedValues="Selected"
								 MultiSelectionComponent="MudExtensions.Enums.MultiSelectionComponent.None">

					@foreach (var item in Filtered)
					{

						<MudListItemExtended Value="item"
											 Text="@GetHeaderText(item)"
											 SecondaryText="@GetDescriptionText(item)" />
					}
				</MudListExtended>
			</div>
		}
	</DialogContent>

	<DialogActions>
		<MudButton Color="Color.Primary"
				   Disabled="(custom && form?.IsValid == false) || (!custom && !Selected.Any())"
				   OnClick="Add">Add</MudButton>
		<MudButton OnClick="Instance.Cancel">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@code {
	bool custom;

	Advantage customAdvantage = new();

	MudForm form = null!;

	[CascadingParameter]
	public MudDialogInstance Instance { get; set; } = null!;

	[Parameter]
	public IEnumerable<Advantage> DataSource { get; set; } = DaemonDb.Advantages.AsReadOnly();

	IEnumerable<Advantage> Filtered = Enumerable.Empty<Advantage>();
	IEnumerable<Advantage> Selected = Enumerable.Empty<Advantage>();

	string? filter;

	bool? filterPositiveNegative;

	protected override void OnInitialized()
	{
		FilterAdvantages();
	}

	void FilterAdvantages()
	{
		Filtered = DataSource.AsEnumerable();
		if (!String.IsNullOrWhiteSpace(filter))
			Filtered = Filtered.Where(d => d.Name.Contains(filter));

		if (filterPositiveNegative == true)
			Filtered = Filtered.Where(d => d.Cost >= 0);
		else if (filterPositiveNegative == false)
			Filtered = Filtered.Where(d => d.Cost < 0);
	}
	void Add()
	{
		if (custom)
		{
			form.Validate();
			if (!form.IsValid) return;
			Instance.Close<IEnumerable<Advantage>>([customAdvantage]);
		}
		else
			Instance.Close(Selected);
	}

	string GetHeaderText(Advantage advantage) => $"{advantage.Name}: {advantage.Cost}";

	string GetDescriptionText(Advantage advantage)
	{
		string?[] text = [advantage.Description, advantage.Requirements];
		return String.Join(Environment.NewLine, text);
	}
}
