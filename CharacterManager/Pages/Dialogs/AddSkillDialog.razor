<MudDialog Style="min-width:300px">
	<TitleContent>
		<MudStack Row AlignItems="AlignItems.Center">

				<MudText Typo="Typo.h6">Add Skill</MudText>
				<MudSpacer />
				<MudSwitch Label="custom" @bind-Value="custom" />
			</MudStack>
		</TitleContent>
		<DialogContent>
			@if (custom)
		{
			<MudTextField Label="Skill name" @bind-Value="customSkill.Name" />

			<MudTextField Label="Skill description" Lines="3" @bind-Value="customSkill.Description" />

			<MudSelect T="AttributeType?" @bind-Value="customSkill.Attribute" Label="Based attribute">
				<MudSelectItem T="AttributeType?" Value="null">None</MudSelectItem>

				@foreach (var attr in Enum.GetValues<AttributeType>())
				{
					<MudSelectItem T="AttributeType?" Value="attr">@attr.ToString()</MudSelectItem>
				}
			</MudSelect>
		}
		else
		{
			<div style="max-height:60vh;overflow:scroll">


				<MudTextField Label="Filter"
							  @bind-Value="filter"
							  OnDebounceIntervalElapsed="FilterSkills"
							  DebounceInterval="200" />
				<MudListExtended T="Skill"
								 MultiSelection="true"
								 Clickable="true"
								 Virtualize="false"
								 @bind-SelectedValues="selectedSkills"
								 MultiSelectionComponent="MudExtensions.Enums.MultiSelectionComponent.None"
								 Style="max-height:60vh">


					@foreach (var skill in SkillsFiltered)
					{
						<MudListItemExtended Value="skill"
											 Text="@GetHeader(skill)"
											 SecondaryText="@skill.Description" />
					}
				</MudListExtended>
			</div>
		}
	</DialogContent>
	<DialogActions>
		<MudButton Color="Color.Primary" OnClick="Select" Disabled="((!custom && !selectedSkills.Any()) || (custom && String.IsNullOrWhiteSpace(customSkill.Name)))">Add</MudButton>
		<MudButton OnClick="Instance.Cancel">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@code {
	IEnumerable<Skill> SkillsFiltered = Enumerable.Empty<Skill>();

	IEnumerable<Skill> selectedSkills = Enumerable.Empty<Skill>();
	string? filter;

	Skill customSkill = new(String.Empty);

	bool custom;

	[Parameter]
	public IEnumerable<Skill> DataSource { get; set; } = Enumerable.Empty<Skill>();

	[Parameter]
	public IEnumerable<string> CurrentSkillSet { get; set; } = Enumerable.Empty<string>();

	[CascadingParameter]
	public MudDialogInstance Instance { get; set; } = null!;

	protected override void OnInitialized()
	{
		FilterSkills();
	}


	void FilterSkills()
	{
		SkillsFiltered = DataSource.Where(d => !CurrentSkillSet.Contains(d.Name));
		if (!String.IsNullOrWhiteSpace(filter))
			SkillsFiltered = SkillsFiltered.Where(d => d.Name.Contains(filter) || d.Attribute?.ToString().ToLower() == filter.ToLower());
	}

	void Select()
	{
		if (!custom && selectedSkills.Any())
			Instance.Close(selectedSkills);
		else if (custom && !String.IsNullOrWhiteSpace(customSkill.Name))
			Instance.Close(new Skill[] { customSkill });
		else
			Instance.Cancel();
	}

	string GetHeader(Skill skill)
	{
		string?[] parts = [skill.Name, null, null];
		if (skill.Attribute.HasValue)
			parts[1] = $"({skill.Attribute.Value.ToString()[..3].ToUpper()})";

		if (skill.Cost != 0)
			parts[2] = $"- cost: {skill.Cost}";

		return String.Join(' ', parts);
	}
}
