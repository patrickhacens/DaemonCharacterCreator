@inherits LayoutComponentBase
@inject ILogger<MainLayout> logger
@inject Db db
@inject ISnackbar snackbar


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="ToggleDrawer" />
        <MudText Typo="Typo.h4" Class="ml-3">Daemon CE</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always">
        <MudNavMenu>
            <MudNavLink Href="/new" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.PersonAdd">Create character</MudNavLink>
            
            <MudNavGroup Title="Characters" Expanded Icon="@Icons.Material.Filled.Group">
                 @if (!players.Any())
                {
                    <MudNavLink Href="/new" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person">It's empty here, create a new one</MudNavLink>
                }
                @foreach (var player in players)
                {
                    <MudNavLink Href="@($"/characters/{player.Name}")" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person">@player.Name</MudNavLink>

                }
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="mt-4">
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool drawerOpen = true;

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    IEnumerable<Player> players = Enumerable.Empty<Player>();

    protected override Task OnInitializedAsync()
    {
        db.CharacterListChanged += RefreshEvent;
        return Refresh();

    }
    async void RefreshEvent(object? sender, EventArgs e)
    {
        await Refresh();
    }

    async Task Refresh()
    {
        players = await db.GetAll<Player>() ?? Enumerable.Empty<Player>();
        await InvokeAsync(StateHasChanged);

    }
}